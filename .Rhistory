library(tidyverse)
install.packages('tidyverse',dependencies = T)
library(tidyverse)
install.packages(c('scales','colorspace','lazyeval','jsonlite','readr','png','tidyverse','readxl',
'BiocGenerics', 'BiocInstaller', 'Biostrings', 'data.table', 'feather', 'IRanges', 'robustbase', 'S4Vectors',
'slam', 'sourcetools', 'survival', 'XVector', 'zlibbioc','devtools','xlsx','xml2','mixOmics','AppliedPredictiveModeling',
'pheatmap','gridExtra','corrplot','XML'),
dependencies = T)
source("https://bioconductor.org/biocLite.R")
biocLite(c("xcms",'Biostrings','KEGGREST','CAMERA','sva'))
library(devtools)
install_github('danielbraas/MetabFUN')
install.packages('stringi', dependencies = T)
library(tidyverse)
install.packages('stringi')
install.packages('stringi', dependencies = T)
install.packages('stringi', dependencies = T)
install.packages('C:/Users/Daniel/Downloads/stringi_1.2.4.tar.gz', repos = NULL, type="source")
R CMD INSTALL --no-lock <pkg>
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
library(stringi)
library(devtools)
install_github('danielbraas/MetabFUN')
install.packages(c("callr", "cli", "commonmark", "CORElearn", "covr", "data.table", "devtools", "digest", "dimRed", "doParallel", "dplyr", "egg", "evaluate", "fansi", "ggplot2", "htmlwidgets", "ipred", "later", "lattice", "lintr", "magic", "MASS", "Matrix", "mgcv", "mime", "ModelMetrics", "nanotime", "pkgbuild", "pkgconfig", "pkgload", "pls", "processx", "R.rsp", "R.utils", "R6", "Rcpp", "RcppCCTZ", "reprex", "reshape", "rlang", "robustbase", "roxygen2", "rstudioapi", "shiny", "snow", "survival", "testthat", "tidyr", "tidyselect", "tinytex", "TTR", "webshot", "xfun", "XML", "xtable", "xts", "zoo"))
install.packages('XLConnect')
library(XLConnect)
help(package='XLConnect')
system('powershell -command "netstat -an"')
system('powershell -command "netstat -ab"')
library(xml2)
test <- read_html('https://rdpguard.com/free-whois.aspx?ip=104.193.83.157#')
test
xml_contents()
xml_contents(test)
xml_text(test)
library(tidyverse)
library(XLConnect)
install.packages('tidyverse', dependencies = T)
library(tidyverse)
install.packages('mailR')
library(mailR)
sender <- "danielbraas@gmail.com"  # Replace with a valid address
recipients <- c("danielbraas@gmail.com")  # Replace with one or more valid addresses
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "aspmx.l.google.com", port = 25),
authenticate = FALSE,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465),
authenticate = FALSE,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 587),
authenticate = FALSE,
send = FALSE)
help(package='mailR')
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 587),
authenticate = T,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 587, user.name='danielbraas@gmail.com', passwd='3rzW54vg'),
authenticate = T,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name='danielbraas@gmail.com', passwd='3rzW54vg'),
authenticate = T,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com", port = 465, user.name='danielbraas@gmail.com', passwd='3rzW54vg', ssl=T),
authenticate = T,
send = FALSE)
email <- send.mail(from = sender,
to = recipients,
subject="Subject of the email",
body = "Body of the email",
smtp = list(host.name = "smtp.gmail.com",
port = 465,
user.name='danielbraas@gmail.com',
passwd='3rzW54vg',
ssl=T),
authenticate = T,
send = T)
shiny::runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
help(package='shinyFiles')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
?observe
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat')
library(tidyverse)
library(shiny)
library(shinyFiles)
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/shiny_msconvert/shiny_msconvert.R')
runApp('shiny_msconvert.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/shiny_msconvert/shiny_msconvert.R')
test <- function(x){print(is.null(x))}
test()
test <- function(x){print(is_empty(x))}
test()
test <- function(x){class(x)}
test()
test <- function(x){x==''}
test()
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/shiny_msconvert/shiny_msconvert.R')
runApp('shiny_msconvert.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/shiny_msconvert/shiny_msconvert.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/shiny_msconvert/shiny_msconvert.R')
switch()
?switch()
grepl('x','ex')
grep('x','ex')
grep('x','ef')
grep('x','ef') %>% is.null()
grep('x','ef') %>% is.empty()
grep('x','ef') %>% is_empty()
help(package="base")
ls()
env()
options()
names(options())
.libPaths()
options()$shiny.launch.browser
Sys.getenv()
Sys.info
Sys.glob()
Sys.getlocale()
Sys.getpid()
sys.status()
help(package=shiny)
shell('VOL')
shell('time')
shell('tasklist')
shell('systeminfo')
install.packages(c("backports", "Cairo", "colorspace", "digest", "dplyr", "DT", "foghorn", "forcats", "fs", "ggplot2", "glue", "haven", "hexbin", "Hmisc", "htmltools", "httpuv", "jsonlite", "kernlab", "knitr", "later", "lazyeval", "mgcv", "mime", "nlme", "openxlsx", "plotly", "promises", "purrr", "R6", "Rcpp", "readr", "readxl", "rlang", "rmarkdown", "roxygen2", "rvest", "shiny", "shinyFiles", "sp", "stringi", "stringr", "survival", "testit", "testthat", "tibble", "tidyr", "xfun", "xml2"))
BiocManager::version('xcms')
BiocManager::version()
BiocManager::install('xcms')
??pvclust
install.packages('pvclust')
install.packages('pvclust', dependencies = T)
help(packge=pvclust)
help(packge='pvclust')
library(pvclust)
help(packge='pvclust')
?pvclust
result <- pvclust(lung, method.dist="cor", method.hclust="average", nboot=1000)
data(kybg)
data(lung)
result <- pvclust(lung, method.dist="cor", method.hclust="average", nboot=1000)
plot(result)
str(result)
names(result)
result$edges
plot(result)
pvrect(result, alpha = 0.95)
pvrect(result, alpha = 0.99, col = 'blue')
.libPaths()
.libPaths()
.libPaths('C:/R_lib/')
.libPaths()
.libPaths(c('C:/R_lib/','C:/R/library/')
.libPaths(c('C:/R_lib/','C:/R/library/'))
.libPaths()
.libPaths()
.libPaths()
install.packages(c("BiocManager", "covr", "curl", "dendextend", "digest", "e1071", "foghorn", "highlight", "igraph", "leaflet", "maptools", "prodlim", "pvclust", "RcppEigen", "rgdal", "rlang", "rmarkdown", "roxygen2", "rrcov", "RSpectra", "scales", "selectr", "shinyFiles", "testthat", "tidyverse", "webshot"))
install.packages(c("boot", "foreign", "KernSmooth", "Matrix", "mgcv", "nlme", "survival"), lib="C:/R/library")
install.packages('DT', dependencies = T)
Shiny <- list('Shiny' = 'C:/Users/Daniel/Dropbox/R_projects/ShinyDB', 'R_Projects' = 'C:/Users/Daniel/Dropbox/R_projects', 'Dropbox' = 'C:/Users/Daniel/Dropbox')
conf <- list('root' = 'C:/', 'Shiny' = Shiny)
library(tidyverse)
jsonlite::toJSON(conf) %>% write_lines(., 'C:/R_lib/config.json')
library(shiny); runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
conf
library(shiny); runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
help(package = "shiny")
install.packages('shinythemes', dependencies = T)
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
?fluidPage
install.packages(c('caTolls','ptw'), dependencies = T)
BiocInstaller::biocLite('mixOmics')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
dat <- read_lines('C:/R_lib/shinythemes/shinythemes/css/braasian.min.css')
head(dat)
tail(dat)
dat.l <- tail(dat,1)
length(dat.l)
str_length(dat.l)
str_split(dat.l, pattern = '}')
str_split(dat.l, pattern = '\}')
str_split(dat.l, pattern = '\\}')
str_split(dat.l, pattern = '\\}') %>% .[1:2]
str_split(dat.l, pattern = '\\}') %>% .[[1]] %>% [1]
str_split(dat.l, pattern = '\\}') %>% .[[1]] %>% .[1]
str_split(dat.l, pattern = '\\}') %>% .[[1]] %>% .[1;3]
str_split(dat.l, pattern = '\\}') %>% .[[1]] %>% .[1:3]
str_replace(dat.l, '}', '}\n') %>% .[[1]] %>% .[1:3]
str_replace(dat.l, '\\}', '\\}\n') %>% .[[1]] %>% .[1:3]
str_replace(dat.l, '\\}', '\\}\n')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
?`shinyFiles-buttons`
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
# Define folder structure
roots <- read_lines('~/config.json') %>%
jsonlite::fromJSON()$Shiny
shinyApp(ui, server)
library(tidyverse)
library(shiny)
library(shinyFiles)
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
runApp('modules1.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
?fluidPage
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
?tabPanel
?tabsetPanel
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
list.files(path = '~')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
library(shiny); runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/modules/modules1.R')
ui <- navbarPage(
title = 'Shiny modules',
theme = 'braasian.min.css',
tabPanel(
title = 'First app',
fluidRow(
column(
width = 2,
csvFileInput(id = "datafile",
label = "User data (.csv format)")
),
column(
width = 10,
dataTableOutput("table")
)
)
),
# Second app
tabPanel(
title = 'Second app',
fluidRow(
column(
width = 2,
),
column(
width = 10,
)
)
)
)
str(ui)
names(ui)
ui[[1]]$name
ui[[1]]$attribs
ui[[1]]$children
ui[[2]]$children
ui[[3]]
csvFileInput <- function(id, label = "CSV file") {
# Create a namespace function using the provided id
ns <- NS(id)
tagList(
fileInput(ns("file"), label),
checkboxInput(ns("heading"), "Has heading"),
selectInput(ns("quote"), "Quote", c(
"None" = "",
"Double quote" = "\"",
"Single quote" = "'"
))
)
}
View(csvFile)
str(csvFileInput)
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table10.R')
shinyApp(ui, server)
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table11.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table11.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table11.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table11.R')
runApp('load_table11.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table11.R')
runApp('C:/Users/Daniel/Dropbox/R_projects/ShinyDB/plotthat/load_table11.R')
setwd("C:/Users/Daniel/Dropbox/R_projects/ShinyDB")
dat <- read_csv('plotthat/iris.csv')
row.names(dat) <- dat$Species
head(dat)
runApp('plotthat/load_table11.R')
runApp('plotthat/load_table11.R')
runApp('plotthat/load_table11.R')
runApp('plotthat/load_table11.R')
runApp('plotthat/load_table11.R')
