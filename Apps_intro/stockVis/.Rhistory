tuneLength = 10,
preproc = 'pca')
str(PCA)
plot(PCA
)
PCA <- preProcess(iris[,1:4], method='pca')
str(pca)
head(PCA)
plot(PCA)
str(PCA)
PCA$dim
PCA$rotation
PCA$pcaComp
prcomp(iris[,1:4])$rotation
PCA <- preProcess(iris[,1:4],
method='pca',
thresh = 1)
PCA$rotation
princomp(iris[,1:4])
str(princomp(iris[,1:4]))
princomp(iris[,1:4])$scores
princomp(iris[,1:4])$loadings
plot(princomp(iris[,1:4])$scores[,1:2])
plot(princomp(iris[,1:4])$scores[,1:2], color=iris$Species)
plot(princomp(iris[,1:4])$scores[,1:2], col=iris$Species)
plot(pca[,1:2], col=pca$Species)
prcomp(iris[,1:4])$rotation
PCA$rotation
PCA <- preProcess(iris[,1:4],
method='pca',
thresh = 1,
numComp = 4)
PCA$rotation
?preProcess
PCA <- preProcess(iris[,1:4],
method='pca',
thresh = 1,
pcaComp = 4)
PCA$rotation
plot(PCA$scores[,1:2])
predict(iris$Species, PCA)
predict(PCA, iris)
ggplot(predict(PCA, iris), aes(PC1, PC2)+geom_point()
ggplot(predict(PCA, iris), aes(PC1, PC2))+geom_point()
ggplot(predict(PCA, iris), aes(PC1, PC2, color=Species))+geom_point()
ggplot(pca, aes(PC1, PC2, color = Species))+
geom_point(size=5)+
scale_color_manual('Species', values = colors)
ggplot(predict(PCA, iris), aes(PC1, PC2, color=Species))+geom_point(size=5)
pca <- as.data.frame(prcomp(iris[,1:4], center = T, scale = T)$x)
pca$Species <- iris$Species
ggplot(pca, aes(PC1, PC2, color = Species))+
geom_point(size=5)+
scale_color_manual('Species', values = colors)
PCA <- preProcess(iris[,1:4],
method='pca')
ggplot(predict(PCA, iris), aes(PC1, PC2, color=Species)) + geom_point(size = 3)
ggplot(predict(PCA, iris), aes(PC1, PC2, color=Species)) +
geom_point(size = 3) +
scale_color_manual('Species', values = colors)
ggplot(pca, aes(PC1, PC2, color = Species))+
geom_point(size=3)+
scale_color_manual('Species', values = colors)
str(pls.test)
plot(plsda)
str(plsda)
sens.pls <- plsr(sensory ~ chemical, ncomp = 4, scale = TRUE, data = oliveoil)
sens.pls
head(oliveoil)
str(oliveoil)
oliveoil$chemical
sens.pls
plot(sens.pls)
head(yarn)
str(yarn)
library(readxl)
library(MetabFUN)
library(stringr)
library(data.table)
library(readxl)
library(MetabFUN)
library(MASS)
library(data.table)
library(readxl)
library(MetabFUN)
library(MASS)
Input =("
Diet    Country  Weight_change
A       USA      0.120
A       USA      0.125
A       USA      0.112
A       UK       0.052
A       UK       0.055
A       UK       0.044
B       USA      0.096
B       USA      0.100
B       USA      0.089
B       UK       0.025
B       UK       0.029
B       UK       0.019
C       USA      0.149
C       USA      0.150
C       USA      0.142
C       UK       0.077
C       UK       0.080
C       UK       0.066
")
Data = read.table(textConnection(Input),header=TRUE)
Data$Country = factor(Data$Country,
levels=unique(Data$Country))
model <- with(Data, aov(Weight_change ~ Diet + Country + Diet:Country))
summary(model)
TukeyHSD(model)
TukeyHSD(model)$Country
Input =("
Diet    Country  Weight_change
A       USA      0.120
A       USA      0.125
A       USA      0.112
A       UK       0.052
A       UK       0.055
A       UK       0.044
A       NZ       0.080
A       NZ       0.090
A       NZ       0.075
B       USA      0.096
B       USA      0.100
B       USA      0.089
B       UK       0.025
B       UK       0.029
B       UK       0.019
B       NZ       0.055
B       NZ       0.065
B       NZ       0.050
C       USA      0.149
C       USA      0.150
C       USA      0.142
C       UK       0.077
C       UK       0.080
C       UK       0.066
C       NZ       0.055
C       NZ       0.065
C       NZ       0.050
C       NZ       0.054
")
Data = read.table(textConnection(Input),header=TRUE)
ggplot(Data, aes(Country, mean(Weight_change), color=Diet))+geom_point()+geom_line(aes(group=Diet))
library(MetabFUN)
ggplot(Data, aes(Country, mean(Weight_change), color=Diet))+geom_point()+geom_line(aes(group=Diet))
ggplot(Data, aes(Country, Weight_change, color=Diet)+geom_point()+geom_line(aes(group=Diet))
ggplot(Data, aes(Country, Weight_change, color=Diet))+geom_point()+geom_line(aes(group=Diet))
model <- aov(Weight_change ~ Diet + Country + Diet:Country, data = Data)
summary(model)
TukeyHSD(model)
plot(TukeyHSD(model))
str(TukeyHSD(model))
help(package='mixOmics')
library(mixOmics)
library(PADOG)
library(data.table)
library(readxl)
library(MetabFUN)
isomer('	C6H12O2')
isomer('C6H12O2')
library(mixOmics)
library(tidyverse)
data(vac18)
X <- vac18$genes
Y <- vac18$stimulation
vac18$sample
design <- data.frame(sample = vac18$sample)
vac18.splsda.multilevel <- splsda(X,
Y = vac18$stimulation,
multilevel = design,
ncomp = 3,
keepX = c(30, 137, 123))
tune.loo.vac18 <- tune.multilevel(X, Y, multilevel = vac18$sample,
ncomp=2,
test.keepX=c(5, 10, 15),
already.tested.X = c(50),
method = 'splsda',
dist = 'mahalanobis.dist',
validation = 'loo')
?tune.splsda
plot(tune.loo.vac18)
library(mixOmics)
library(tidyverse)
data(srbct)
X = srbct$gene  #the gene expression data
srbct.plsda <- plsda(X, Y, ncomp = 10)  # set ncomp to 10 for performance assessment later
plotIndiv(srbct.plsda , comp = 1:2,
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, title = 'PLSDA on SRBCT')
X = srbct$gene  #the gene expression data
Y = srbct$class  #outcome categories
srbct.plsda <- plsda(X, Y, ncomp = 10)  # set ncomp to 10 for performance assessment later
plotIndiv(srbct.plsda , comp = 1:2,
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, title = 'PLSDA on SRBCT')
background = background.predict(srbct.plsda, comp.predicted=2, dist = "max.dist")
plotIndiv(srbct.plsda, comp = 1:2,
group = srbct$class, ind.names = FALSE, title = "Maximum distance",
legend = TRUE,  background = background)
set.seed(2543) # for reproducibility, only when the `cpus' argument is not used
perf.plsda.srbct <- perf(srbct.plsda, validation = "Mfold", folds = 5,
progressBar = FALSE, auc = TRUE, nrepeat = 10)
plot(perf.plsda.srbct,
col = color.mixo(5:7),
sd = TRUE, legend.position = "horizontal")
perf.plsda.srbct$choice.ncomp
perf.plsda.srbct
perf.plsda.srbct$predict
perf.plsda.srbct
?perf
auc.plsda = auroc(srbct.plsda, roc.comp = 6)
plot(auroc(srbct.plsda, roc.comp = 6))
plot(auroc(srbct.plsda, roc.comp = 3))
list.keepX <- c(1:10,  seq(20, 300, 10))
list.keepX
tune.splsda.srbct <- tune.splsda(X, Y, ncomp = 6, validation = 'Mfold', folds = 5,
progressBar = TRUE, dist = 'max.dist', measure = "BER",
test.keepX = list.keepX, nrepeat = 10, cpus = 2)
error <- tune.splsda.srbct$error.rate  # error rate per component for the keepX grid
ncomp <- tune.splsda.srbct$choice.ncomp$ncomp # optimal number of components based on t-tests
ncomp
select.keepX <- tune.splsda.srbct$choice.keepX[1:ncomp]  # optimal number of variables to select
select.keepX
plot(tune.splsda.srbct, col = color.jet(6))
splsda.srbct <- splsda(X, Y, ncomp = ncomp, keepX = select.keepX)
plotIndiv(splsda.srbct, comp = c(1,2),
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE,
title = 'sPLS-DA on SRBCT, comp 1 & 2')
back <- background.predict(splsda.srbct, comp.predicted = 3)
back <- background.predict(splsda.srbct, comp.predicted = 2)
back <- background.predict(splsda.srbct, comp.predicted = 1:2)
back <- background.predict(splsda.srbct, comp.predicted=2, dist = "max.dist")
plotIndiv(splsda.srbct, comp = c(1,2),
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, background = back,
title = 'sPLS-DA on SRBCT, comp 1 & 2')
?background.predict
error
which.min(error$comp.1)
which.min(error$comp1)
err
error
str(error)
plot(error)
plot(tune.splsda.srbct, col = color.jet(6))
select.keepX
plotIndiv(splsda.srbct, comp = c(1,2),
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, background = back,
title = 'sPLS-DA on SRBCT, comp 1 & 2')
plotIndiv(splsda.srbct, comp = c(1,3),
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, background = back,
title = 'sPLS-DA on SRBCT, comp 1 & 2')
plotIndiv(splsda.srbct, comp = 1:3,
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, style='3d'
title = 'sPLS-DA on SRBCT, comp 1 & 2')
plotIndiv(splsda.srbct, comp = 1:3,
group = srbct$class, ind.names = FALSE,
ellipse = TRUE, legend = TRUE, style='3d',
title = 'sPLS-DA on SRBCT, comp 1 & 2')
update.packages(checkBuilt = TRUE)
install.packages(c("ade4", "bayesm", "BIFIEsurvey", "boot", "CDM", "coin", "CORElearn", "cubature", "curl", "desc", "deSolve", "devtools", "dplyr", "earth", "fda", "Formula", "gamm4", "GGally", "git2r", "haven", "htmlwidgets", "igraph", "knitr", "limSolve", "mboost", "memisc", "mgcv", "miceadds", "mirt", "mirtCAT", "modelr", "MplusAutomation", "OpenMx", "pander", "partitions", "pec", "plotly", "plotmo", "purrr", "randomForestSRC", "rcdk", "Rcpp", "reshape", "rlang", "RMySQL", "sandwich", "seqinr", "shiny", "SimComp", "sirt", "sjlabelled", "sjmisc", "spatstat.utils", "stabs", "stringdist", "subselect", "TAM", "TTR", "VGAM", "WGCNA", "WhatIf", "withr", "xts", "Zelig"))
install.packages(c("ade4", "bayesm", "BIFIEsurvey", "boot", "CDM", "coin", "CORElearn", "cubature", "curl", "desc", "deSolve", "devtools", "dplyr", "earth", "fda", "Formula", "gamm4", "GGally", "git2r", "haven", "htmlwidgets", "igraph", "knitr", "limSolve", "mboost", "memisc", "mgcv", "miceadds", "mirt", "mirtCAT", "modelr", "MplusAutomation", "OpenMx", "pander", "partitions", "pec", "plotly", "plotmo", "purrr", "randomForestSRC", "rcdk", "Rcpp", "reshape", "rlang", "RMySQL", "sandwich", "seqinr", "shiny", "SimComp", "sirt", "sjlabelled", "sjmisc", "spatstat.utils", "stabs", "stringdist", "subselect", "TAM", "TTR", "VGAM", "WGCNA", "WhatIf", "withr", "xts", "Zelig"))
install.packages(c("ade4", "bayesm", "BIFIEsurvey", "boot", "CDM", "coin", "CORElearn", "cubature", "curl", "desc", "deSolve", "devtools", "dplyr", "earth", "fda", "Formula", "gamm4", "GGally", "git2r", "haven", "htmlwidgets", "igraph", "knitr", "limSolve", "mboost", "memisc", "mgcv", "miceadds", "mirt", "mirtCAT", "modelr", "MplusAutomation", "OpenMx", "pander", "partitions", "pec", "plotly", "plotmo", "purrr", "randomForestSRC", "rcdk", "Rcpp", "reshape", "rlang", "RMySQL", "sandwich", "seqinr", "shiny", "SimComp", "sirt", "sjlabelled", "sjmisc", "spatstat.utils", "stabs", "stringdist", "subselect", "TAM", "TTR", "VGAM", "WGCNA", "WhatIf", "withr", "xts", "Zelig"))
library(mixOmics)
library(MetabFUN)
data_annotate(291.08337, adduct='neg')
data_annotate(291.08337, adduct='M-H')
data_annotate(145.03798, adduct='M-H')
data_annotate(145.03798, adduct='neg')
rm(list=ls())
test <- prcomp(mtcars, scale=T, center=TRUE)
biplot(test)
library(mixOmics)
library(MetabFUN)
library(readxl)
score <- data.frame(test$x) %>% mutate(Name = rownames(.))
score
ggplot(score, aes(PC1, PC2, label=Name))+geom_point(size=3)+geom_text(vjust=-1)
ggplot(score, aes(PC1, PC2, label=Name))+geom_point(size=3)+geom_text(vjust=-1)+xlim(-6,9)+ylim(-6,9)
loadings <- data.frame(test$rotation) %>% mutate(Variable = rownames(.))
ggplot(loadings, aes(PC1, PC2, label=Variable))+geom_point(size=3)+geom_text(vjust=-1)+xlim(-.3,0.5)+ylim(-.3,0.5)
ggplot(loadings, aes(PC1*10, PC2*10, label=Variable))+geom_point(size=3)+geom_text(vjust=-1)+xlim(-.3,0.5)+ylim(-.3,0.5)
ggplot(loadings, aes(PC1, PC2, label=Variable))+geom_point(size=3)+geom_text(vjust=-1)+xlim(-6,9)+ylim(-6,9)
ggplot(loadings, aes(PC1*10, PC2*10, label=Variable))+geom_point(size=3)+geom_text(vjust=-1)+xlim(-6,9)+ylim(-6,9)
ggplot()+geom_point(data=score, aes(PC1, PC2, label=Name), size=2)
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2, label=Name)
head(score)
ggplot()+geom_point(data=score, aes(PC1, PC2, label=Name), size=2)+geom_text()
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(label=Name))
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name))
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+xlim(-6,9)+ylim(-6,9)
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+xlim(-6,9)+ylim(-6,9)+geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+xlim(-6,9)+ylim(-6,9)+geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')+geom_text(data=loadings, aes(PC1*10, PC2*10, label=Variables), color='red', vjust=-1)
names(loadings)
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+xlim(-6,9)+ylim(-6,9)+geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')+geom_text(data=loadings, aes(PC1*10, PC2*10, label=Variable), color='red', vjust=-1)
biplot(test)
?pca
test2 <- pca(mtcars, scale=T)
pca$X
test2$X
scale(mtcars, center=T)
scale(mtcars, center=T, scale=TRUE)
plotvar(test2)
plotvars(test2)
plotVar(test2)
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+xlim(-6,9)+ylim(-6,9)+geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')+geom_text(data=loadings, aes(PC1*10, PC2*10, label=Variable), color='red', vjust=-1)
cor(scale(mtcars, center=T), score[,1:2], use='pairwise')
plotvar(test2)
plotVar(test2)
CCP <- cor(scale(mtcars, center=T), score[,1:2], use='pairwise')
ggplot()+geom_point(loadings, aes(PC1, PC2), color='blue')+geom_text(loadings, aes(PC1, PC2, label=Name), vjust=-1)
loadings
ggplot()+geom_point(loadings, aes(PC1, PC2), color='blue')+geom_text(loadings, aes(PC1, PC2, label=variable.names()), vjust=-1)
ggplot()+geom_point(loadings, aes(PC1, PC2), color='blue')+geom_text(loadings, aes(PC1, PC2, label=Variable), vjust=-1)
ggplot()+geom_point(loadings, aes(PC1, PC2), color='blue')+geom_text(loadings, aes(PC1, PC2, label=Variable), vjust=-1)
ggplot()+geom_point(data=loadings, aes(PC1, PC2), color='blue')+geom_text(data=loadings, aes(PC1, PC2, label=Variable), vjust=-1)
head(CCP)
ggplot()+geom_point(data=loadings, aes(PC1, PC2), color='blue')+geom_text(data=loadings, aes(PC1, PC2, label=Variable), vjust=-1)+geom_point(data=CCP, aes(PC1, PC2), color='red')
CCP <- cor(scale(mtcars, center=T), score[,1:2], use='pairwise') %>% data.frame %>% mutate(Variable = rownames(.))
ggplot()+geom_point(data=loadings, aes(PC1, PC2), color='blue')+geom_text(data=loadings, aes(PC1, PC2, label=Variable), vjust=-1)+geom_point(data=CCP, aes(PC1, PC2), color='red')
ggplot()+geom_point(data=loadings, aes(PC1, PC2), color='blue')+geom_text(data=loadings, aes(PC1, PC2, label=Variable), vjust=-1)+geom_point(data=CCP, aes(PC1, PC2), color='red')+geom_text(data=CCP, aes(PC1, PC2, label=Variable), vjust=-1)
score <- data.frame(test$x) %>% mutate(Name = rownames(.))
CCP <- cor(scale(mtcars, center=T), score[,1:2], use='pairwise')
ggplot()+geom_point(data=score, aes(PC1, PC2), size=2)+geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+xlim(-6,9)+ylim(-6,9)+geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')+geom_text(data=loadings, aes(PC1*10, PC2*10, label=Variable), color='red', vjust=-1)
ggplot()+                               #connection between correlation circle plot (red) and loadings (blue)
geom_point(data=loadings, aes(PC1, PC2), color='blue')+
geom_text(data=loadings, aes(PC1, PC2, label=Variable), vjust=-1)+
geom_point(data=CCP, aes(PC1, PC2), color='red')+
geom_text(data=CCP, aes(PC1, PC2, label=Variable), vjust=-1)
CCP <- data.frame(cor(scale(mtcars, center=T), score[,1:2], use='pairwise')) %>% mutate(Variable = rownames(.))
ggplot()+                               #connection between correlation circle plot (red) and loadings (blue)
geom_point(data=loadings, aes(PC1, PC2), color='blue')+
geom_text(data=loadings, aes(PC1, PC2, label=Variable), vjust=-1)+
geom_point(data=CCP, aes(PC1, PC2), color='red')+
geom_text(data=CCP, aes(PC1, PC2, label=Variable), vjust=-1)
ggplot()+                               # biplot with ggplot2
geom_point(data=score, aes(PC1, PC2), size=2)+
geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+
xlim(-6,9)+
ylim(-6,9)+
geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')+
geom_text(data=loadings, aes(PC1*10, PC2*10, label=Variable), color='red', vjust=-1)
names(mtcars)
head(mtcars)
mtcars %>% data.frame() %>% mutate(Name = rownames(.)) %>% ggplot(., aes(mpg, disp, label=name))+geom_point()+geom_text(vjust=-1)
mtcars %>% data.frame() %>% mutate(Name = rownames(.)) %>% ggplot(., aes(mpg, disp, label=Name))+geom_point()+geom_text(vjust=-1)
cor(mtcars)
cor(mtcars) %>% which.max
ggplot()+                               # biplot with ggplot2
geom_point(data=score, aes(PC1, PC2), size=2)+
geom_text(data=score, aes(PC1, PC2, label=Name), vjust=-1)+
xlim(-6,9)+
ylim(-6,9)+
geom_point(data=loadings, aes(PC1*10, PC2*10), color='red')+
geom_text(data=loadings, aes(PC1*10, PC2*10, label=Variable), color='red', vjust=-1)
library(sva)
install.packages(c("ade4", "AICcmodavg", "arules", "arulesViz", "backports", "bayesm", "BH", "BIFIEsurvey", "BMA", "boot", "BradleyTerry2", "brglm", "BRugs", "car", "caret", "cba", "CDM", "checkmate", "coin", "commonmark", "copula", "CORElearn", "cubature", "curl", "DBI", "desc", "DescTools", "deSolve", "devtools", "diagram", "dplyr", "earth", "evaluate", "fastcluster", "fastICA", "fda", "fields", "forecast", "Formula", "gamlss", "gamlss.dist", "gamm4", "gdata", "GGally", "git2r", "gridExtra", "haven", "HSAUR", "HSAUR2", "htmlwidgets", "httpuv", "httr", "igraph", "intsvy", "jomo", "jsonlite", "knitr", "ks", "likert", "limSolve", "lme4", "lmtest", "MALDIquant", "mapproj", "maps", "maptools", "markdown", "MatchIt", "Matrix", "maxlike", "MBESS", "mboost", "mclust", "mcmc", "MCMCpack", "memisc", "memoise", "mgcv", "mice", "miceadds", "minpack.lm", "mirt", "mirtCAT", "miscTools", "mitml", "mix", "modelr", "MplusAutomation", "multcomp", "multicool", "mvtnorm", "NLP", "nor1mix", "np", "OpenMx", "openssl", "optmatch", "oz", "pander", "partitions", "party", "pbapply", "pbkrtest", "PBSmapping", "pcaPP", "pec", "penalized", "plm", "plot3D", "plotly", "plotmo", "plotrix", "pls", "pmml", "pmmlTransformations", "polyclip", "polynom", "PP", "pROC", "prodlim", "progress", "proxy", "pscl", "pspline", "psych", "purrr", "qap", "qgraph", "quantmod", "quantreg", "R2OpenBUGS", "R6", "RandomFields", "RandomFieldsUtils", "randomForestSRC", "RANN", "rasterVis", "rattle", "rcdk", "rcdklibs", "Rcpp", "RcppArmadillo", "RcppEigen", "readr", "readxl", "reshape", "rgdal", "rgeos", "rgl", "RGtk2", "riskRegression", "rmarkdown", "Rmpfr", "rms", "RMySQL", "robust", "robustbase", "RODBC", "roxygen2", "rpart.plot", "RPostgreSQL", "RSQLite", "rstudioapi", "Rtsne", "RWeka", "RWekajars", "sandwich", "scales", "scatterplot3d", "segmented", "selectr", "sem", "semPlot", "seqinr", "seriation", "sfsmisc", "shape", "shiny", "SimComp", "sirt", "sjmisc", "sourcetools", "sp", "spam", "SparseM", "spatstat", "spatstat.utils", "spdep", "splancs", "stabs", "StanHeaders", "statnet.common", "stringdist", "stringi", "stringr", "subselect", "survey", "swamp", "swirl", "systemfit", "tables", "TAM", "testit", "texreg", "TH.data", "tibble", "tidyr", "tidyverse", "timereg", "tis", "tm", "tripack", "tseries", "TSP", "TTR", "unmarked", "VGAM", "VGAMdata", "viridis", "viridisLite", "WGCNA", "WhatIf", "withr", "XML", "xml2", "xts", "Zelig", "zoo"))
library(mixOmics)
library(tidyverse)
data(stemcells)
#the combined data set X
X = stemcells$gene
# the outcome vector Y:
Y = stemcells$celltype
# the vector indicating each independent study
study = stemcells$study
# number of samples per study:
summary(study)
# experimental design
table(Y,study)
## ------------------------------------------------------------------------
mint.plsda.res.perf = mint.plsda(X = X, Y = Y, study = study, ncomp = 5)
set.seed(2543)  # for reproducible result in this example
perf.mint.plsda.cell <- perf(mint.plsda.res.perf, validation = "Mfold", folds = 5,
progressBar = FALSE, auc = TRUE)
install.packages("mixOmics", dependencies = T)
library(mixOmics)
library(tidyverse)
library(mixOmics)
library(tidyverse)
data(stemcells)
#the combined data set X
X = stemcells$gene
# the outcome vector Y:
Y = stemcells$celltype
# the vector indicating each independent study
study = stemcells$study
# number of samples per study:
summary(study)
# experimental design
table(Y,study)
## ------------------------------------------------------------------------
mint.plsda.res.perf = mint.plsda(X = X, Y = Y, study = study, ncomp = 5)
set.seed(2543)  # for reproducible result in this example
perf.mint.plsda.cell <- perf(mint.plsda.res.perf, validation = "Mfold", folds = 5,
progressBar = FALSE, auc = TRUE)
plot(perf.mint.plsda.cell, col = color.mixo(5:7))
perf.mint.plsda.cell$global.error
perf.mint.plsda.cell$choice.ncomp
mint.plsda.res = mint.plsda(X = X, Y = Y, study = study, ncomp = 2)
plotIndiv(mint.plsda.res, legend = TRUE, title = 'MINT PLS-DA',
subtitle = 'stem cell study', ellipse = T)
tune.mint = tune(X = X, Y = Y, study = study, ncomp = 2, test.keepX = seq(1, 100, 1),
method = 'mint.splsda', dist = "max.dist", progressBar = TRUE)
tune.mint$choice.ncomp #tune.mint$choice.ncomp # tell us again than ncomp=1 is sufficient
tune.mint$choice.keepX
plot(tune.mint, col = color.jet(2))
mint.splsda.res = mint.splsda(X = X, Y = Y, study = study, ncomp = 2,
keepX = tune.mint$choice.keepX)
selectVar(mint.splsda.res, comp = 1)
plotIndiv(mint.splsda.res, study = 'global', legend = TRUE, title = 'MINT sPLS-DA',
subtitle = 'Global', ellipse=T)
plotIndiv(mint.splsda.res, study = 'all.partial',  title = 'MINT sPLS-DA',
subtitle = paste("Study",1:4))
selectVar(mint.splsda.res, comp = 1)
selectVar
rm(list=ls())
install.packages('Cairo', dependencies = T)
shiny::runApp('ShinyDB/Apps_intro/censusVis')
cut(100, 100)
?cut
Z <- stats::rnorm(10000)
table(cut(Z, breaks = -6:6))
Z <- stats::rnorm(10000)
table(cut(Z, breaks = 6))
range(Z)
hist(Z)
hist(Z, breaks=6)
hist(Z, breaks=cut(Z, -6:6))
pmax(100, 0)
pmin(100, 0)
runApp('ShinyDB/Apps_intro/censusVis')
library(maps)
library(mapproj)
?map
map('county', 'california')
map('county', 'california', col=topo.colors(100))
map('county', 'california', col=topo.colors(10))
map('county', 'california', fill=topo.colors(10))
map('county', 'california', fill=T, col=topo.colors(10))
m-map('county', 'california', fill=T, col=topo.colors(10))
m <- map('county', 'california', fill=T, col=topo.colors(10))
m
m <- map('county', 'california, ventura', fill=T, col=topo.colors(10))
m <- map('county', 'california,ventura', fill=T, col=topo.colors(10))
plot(m$x, m$y)
plot(m$x, m$y, type='l')
m <- map('county', 'california, ventura', fill=T, col=topo.colors(10))
m <- map('county', 'california', fill=T, col=topo.colors(10))
plot(m$x, m$y, type='l')
plot(m$x, m$y, type='l', col='blue')
map('country', 'california,los angeles')
map('country', 'california,los angeles', fill=T)
m <- map('county', 'california', fill=T, col=topo.colors(10))
m <- map('county', 'california,los angeles', fill=T, col=topo.colors(10))
m <- map('county', 'california', fill=T, col=topo.colors(10))
data(package='map')
data(package='maps')
data("world.cities")
head(world.cities)
map('france')
data("franceMapEnv")
head(franceMapEnv)
map('state')
?list.files()
?list.files(path='C:/Users/Daniel/Desktop/')
list.files(path='C:/Users/Daniel/Desktop/')
uss <- 'C:/Users/Daniel/Desktop/cb_2014_us_county_5m.shp'
library(tmaptools)
install.packages('tmaptools', dependencies = T)
library(tmaptools)
m <- read_shape(uss)
m <- read_shape(uss, as.sf = T)
?read_shape
library(rgdal)
m <- read_shape(uss, as.sf = T)
ogrInfo()
ogrInfo(uss)
library(shiny); runApp('ShinyDB/censusVis.R')
list.files()
setwd('ShinyDB/')
dir.create('shiny_msconvert')
setwd('shiny_msconvert/')
runApp('shiny_msconvert.R')
runApp('shiny_msconvert.R')
runApp('shiny_msconvert.R')
runApp('shiny_msconvert.R')
runApp('shiny_msconvert.R')
runApp('shiny_msconvert.R')
?fileInput
fileInput
interactive()
runApp('shiny_msconvert.R')
?sidebarPanel
runApp('shiny_msconvert.R')
setwd("C:/Users/Daniel/Dropbox/projects/ShinyDB/Apps_intro/stockVis")
install.packages('quantmod', dependencies = T)
?titlePanel
runApp('stockVis.R')
runApp('stockVis.R')
?getSymbols
help(package=='Shiny')
help(package='Shiny')
